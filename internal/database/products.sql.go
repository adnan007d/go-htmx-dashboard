// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: products.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (id, name, description, created_at, updated_at) VALUES ($1, $2, $3, NOW(), NOW()) RETURNING id, name, description, created_at, updated_at
`

type CreateProductParams struct {
	ID          uuid.UUID
	Name        string
	Description string
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct, arg.ID, arg.Name, arg.Description)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getAProduct = `-- name: GetAProduct :one
SELECT id, name, description, created_at, updated_at FROM products WHERE id = $1
`

func (q *Queries) GetAProduct(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRowContext(ctx, getAProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllProducts = `-- name: GetAllProducts :many
SELECT id, name, description, created_at, updated_at FROM products LIMIT $1 OFFSET $2
`

type GetAllProductsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetAllProducts(ctx context.Context, arg GetAllProductsParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getAllProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductsCount = `-- name: GetProductsCount :one
SELECT COUNT(*) FROM products
`

func (q *Queries) GetProductsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getProductsCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updatedProduct = `-- name: UpdatedProduct :one
UPDATE  products SET name = $2, description = $3, updated_at = NOW() WHERE id = $1 RETURNING id, name, description, created_at, updated_at
`

type UpdatedProductParams struct {
	ID          uuid.UUID
	Name        string
	Description string
}

func (q *Queries) UpdatedProduct(ctx context.Context, arg UpdatedProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updatedProduct, arg.ID, arg.Name, arg.Description)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
